*                   Agent-Oriented Programming and Design 2012                 *
*                            Report - Assignment 1                             *
*                        Rhys van der Waerden (s3134601)                       *
********************************************************************************

Exercise 3: Keeping track of gold pieces
----------------------------------------

- Step 1:
CellEmpty is updated by plan UpdateCellsAround. This plan takes an event
'EUpdateBelief' containing a grid coordinate and a list of contents from
its surrounding cells.

At the moment HandlePercept is the only source of EUpdateBelief events, so the
belief updates could be performed within HandlePercept without any change in
behaviour. However, it makes sense to decouple these because later we would
like the agents to benefit from each other's perception.

More specifically, an agent will send an EUpdateBelief to each of its team
mates so that they may know positions of gold, barriers, opponents etc.
When they receive it they will use their "UpdateCellsAround" plan.

- Step 2:
Created data object "bel_goldAt" in Detailed Design -> Player. Modifer is
"#private" because each agent has its own record of perception (for now).

Added data type:
name: GoldAt
fields: int xCoord, int yCoord (both fields are keys, because a different value
must be stored for every unique cell)

- Added connection FROM GamePlaying TO bel_goldAt.

- Within GamePlaying:
  - Added connection FROM UpdateCellsAround TO bel_goldAt.
  - Set modifier of bel_goldAt to #imports.
  - Added connection FROM bel_goldAt TO InfoReporting (for debugging changes).

- Generated Jack successfully!

- Changed belief GoldAt's superclass to OpenWorld (agents will not know the
status of every cell in the game)

a. Added to GoldAt.bel after PDT Design Block (line 26):

    #indexed query checkIfGold(int xCoord, int yCoord);

Parameters are not logical because we are checking against two keys.

b. Added to GoldAt.bel (line 27):

    #indexed query get(logical int xCoord, logical int yCoord);

Since there is no input parameter (both are logical), this will just return any
tuple.

c. Added to GoldAt.bel (line 29):

    #function query public int countGold() {
        logical int $x, $y;
        int count = 0;

        Cursor c = getLocWithGold($x, $y);
        while (c.next()) {
            count++;
        }

        return count;
    }

This function iterates through all tuples/locations in the beliefset,
incrementing a counter whenever a location is believed to have gold.

d. Added to GoldAt.bel (line 41):

    #complex query checkIfGoldInRow(int x) {
        logical int $x, $y;
        return getLocWithGold($x, $y) && (x == $x.as_int());
    }

The return statement of a complex query invokes an implicit next() method on
the Counter objects. The return expression will continue to iterate through all
values returned by getLocWithGold until the && operator returns true or all
tuples are exhausted.

This means that the iteration will continue until a location with gold also
satisfies the expression (x == $x.as_int()), ie. a grid co-ordinate with gold
at row x.

- Step 3:

Changes to design.pd for plans StartSimulation and FinishSimulation to modify
beliefset GoldAt:

- In detailed design of Player:
  - Made connection FROM capability GameSyncing TO bel_goldAt.
- In GameSyncing:
  - Set bel_goldAt's JackCode modifier to #imports.
  - Made connection FROM plan StartSimulation TO bel_goldAt.
  - Made connection FROM plan FinishSimulation TO bel_goldAt.

Generated code and observed line in PDT block of both StartSimulation.plan and
FinishSimulation.plan:

    #modifies data GoldAt bel_goldAt_dat;

Code generation success!

- Code changes:

StartSimulation.plan:
- No changes required, an empty OpenWorld beliefset is constructed with its
  default constructor.
  Since there are no known gold locations before a percept is received, an
  empty beliefset is appropriate.

  I initially tried initialising all tuples to "Cursor.UKNOWN",
  which failed because:

    "Attempts to add tuples with an unknown belief state into a beliefset with
     Open World semantics will cause a BeliefSetException to be thrown."
                                                    -JACK Agent Manual


FinishSimulation.plan (line 62):
- Remove all tuples at the end of simulation, this data has now expired.

    bel_goldAt_dat.getLocWithGold($x,$y).removeAll(); 

  OpenWorldCursor.removeAll() will remove all tuples from the beliefset that
  match the Cursor returned by getLocWithGold(). ie, all the tuples in the
  beliefset.

UpdateCellsAround.play (line 60):
- Update the GoldAt beliefset for each cell:

    // Iterate on all the marks/labels for cells[i]
    for(int j = 0; j < cells[i].marks.length; j++) {
      String cellType = cells[i].marks[j].type;

      // if mark is "unknown" then do not process the cell at all
      if(cellType.equalsIgnoreCase("unknown") == false) {

        if(cellType.equalsIgnoreCase("obstacle")) {

          // This cell contains an obstacle
          bel_cellEmpty_dat.add(loc.x, loc.y, Cursor.FALSE);
          bel_goldAt_dat.add(loc.x, loc.y, Cursor.FALSE);
        } else {

          // The is considered empty if there is no obstacle
          bel_cellEmpty_dat.add(loc.x, loc.y, Cursor.TRUE);

          // Is there gold in this cell?
          BeliefState hasGold = cellType.equalsIgnoreCase("gold") ?
            Cursor.TRUE : Cursor.FALSE;
          bel_goldAt_dat.add(loc.x, loc.y, hasGold);
        }
      }
    }

  The new code adds a new tuple to the GoldAt beliefset for each cell that is confirmed to either have
  gold or not.

- Step 4:
design.pd:
- In GamePlaying detailed view:
  - Added link FROM bel_goldAt to InfoReporting.
- In InfoReporting detailed view:
  - Set bel_goldAt's JackCode modifier to #imports.
  - Added link FROM bel_goldAt to ConsoleBeliefPrinting.

Generated code.

ConsoleBeliefPrinting.plan:

  final static String [] DIRECTIONS = { "cur", "n", "ne", "e", "se", "s",
    "sw", "w", "nw" };
  final static String [] DIRECTION_NAMES = { "current position", "north",
    "north-east", "east", "south-east", "south", "south-west", "west",
    "north-west" };

      ...

    #reasoning method
    body() {

      ...

      // Iterate through all surrounding cells, report what is found
      for (int i = 0; i < DIRECTIONS.length; i++) {
        GridPoint loc = GridPoint.getFromDir($posX.as_int(), $posY.as_int(), DIRECTIONS[i]);
        // Check for obstacles
        if (bel_cellEmpty_dat.check(loc.x, loc.y).negate()) {
          logAdjacentContents("an obstacle", i);
        } else if (bel_goldAt_dat.checkIfGold(loc.x, loc.y)) {
          logAdjacentContents("gold", i);
        }
      }
    }
    
    void logAdjacentContents(String content, int directionIndex) {
      consoleIface.showConsoleDebug(
          "Agent " + getAgent().getName() + " believes there is " +
            content + " in the " + DIRECTION_NAMES[directionIndex]);
    }

Ran simulation. Trace saved to trace3-5.txt.

- Step 5:

- In design.pd:

Added "posted when" connection from ECellChange event to bel_goldAt so that a
change in an agent's GoldAt beliefset will post an ECellChange event to
update the GUI.

Added code from Assignment spec:

    #posted when (bel_goldAt_dat.getLocWithGold($x, $y)){
      // Cell has a gold
      gridObject = new GridObject($x.as_int(),$y.as_int(),GameGraphics.getGoldString());
      message = "Just learned of gold at " +GridPoint.toString($x.as_int(),$y.as_int());
    }
    #posted when (!bel_goldAt_dat.getLocWithGold($x, $y)){
      // Cell has no gold
      gridObject = new GridObject($x.as_int(), $y.as_int(), "nogold");
      message = "Just learned no gold at " + GridPoint.toString($x.as_int(),$y.as_int());
    }

These events are sent to the GUI when a tuple is added to the GoldAt beliefset
of an agent, updating the display.

- Summary:
In this exercise I learned to:
 - create a beliefset.
 - correctly initialize and clean up.
 - update it with information from the server.
 - query its information.
 - print out information from the beliefset.
