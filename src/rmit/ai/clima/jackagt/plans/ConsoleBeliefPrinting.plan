package rmit.ai.clima.jackagt.plans;
import rmit.ai.clima.iface.LastActionSentBel;
import rmit.ai.clima.jackagt.events.*;
import rmit.ai.clima.jackagt.data.*;

//modify
import rmit.ai.clima.iface.LastActionSentBel;
import rmit.ai.clima.interfaces.*;

import rmit.ai.clima.gui.grid.*;

public plan ConsoleBeliefPrinting extends Plan
{
/******** Start PDT Design Block *** DO NOT EDIT IT *********/

/*
Plan Name: ConsoleBeliefPrinting
Description: Reports believed information in the console
*/
	//Events handled by the plan are declared here.
	#handles event EShowBeliefs eshowbeliefs_h;


	// Declarations of any beliefset/data that the plan accesses.
	#reads data LastActionSentBel bel_lastActionSent_dat;

	#reads data GoldAt bel_goldAt_dat;

	#reads data CurrentStatus bel_currentStatus_dat;

	#reads data CurrentPosition bel_currentPosition_dat;

	#reads data CellEmpty bel_cellEmpty_dat;

	#reads data CurrentRequestActionId bel_currentRequestActionId_dat;

/******** End PDT Design Block *** DO NOT EDIT IT *********/

 	
   // The enclosing agent or capability has to implement these interfaces
   #uses interface DebugInterface consoleIface;
   
   

   final static String [] DIRECTIONS = { "cur", "n", "ne", "e", "se", "s", "sw", "w", "nw" };
   final static String [] DIRECTION_NAMES = { "current position", "north", "north-east", "east", "south-east", "south", "south-west", "west", "north-west" };

   static boolean relevant(EShowBeliefs ev)
    {
        return true;
    }
    
    context()
    {
    	 bel_currentStatus_dat.debugConsole();
    }
    
    
    #reasoning method
    body()
    {
        // Shows agent current location & no of items
        logical int $id, $step;
 
		bel_currentRequestActionId_dat.get($id,$step);
	    consoleIface.showConsoleDebug("Current ID step: "+$id);

        // ************* Print out number of cells that are believed empty
        logical int $x,$y;
        int count=0;
        
        for ( Cursor c = bel_cellEmpty_dat.get($x,$y) ; c.next() ; ) {
            count++;
        }
	    consoleIface.showConsoleDebug("Number of cells believed empty of obstacles: "+count);

		// Now print the cells that are known to be blocked
		count = 0;
        for ( Cursor c = bel_cellEmpty_dat.get($x,$y).negate() ; c.next() ; ) {
            count++;
        }
	    consoleIface.showConsoleDebug("Number of believed obstructed cells: "+count);


	    // ************* BELOW HERE YOU MAY WANT TO REPORT MORE STUFF IN THE CONSOLE ....
	    
	    
	    logical int $posX, $posY;
	    bel_currentPosition_dat.get($posX, $posY);
	    consoleIface.showConsoleDebug("Agent " + getAgent().getName() + " believes it is currently at location ("
	    		+ $posX + "," + $posY + ")");
	    
	    // Iterate through all surrounding cells, report what is found
	    for (int i = 0; i < DIRECTIONS.length; i++) {
	    	GridPoint loc = GridPoint.getFromDir($posX.as_int(), $posY.as_int(), DIRECTIONS[i]);
	    	// Check for obstacles
	    	if (bel_cellEmpty_dat.check(loc.x, loc.y).negate()) {
	    		logAdjacentContents("an obstacle", i);
	    	} else if (bel_goldAt_dat.checkIfGold(loc.x, loc.y)) {
	    		logAdjacentContents("gold", i);
	    	}
	    }
    }
    
    void logAdjacentContents(String content, int directionIndex) {
    	consoleIface.showConsoleDebug(
    			"Agent " + getAgent().getName() + " believes there is " +
    		    content + " in the " + DIRECTION_NAMES[directionIndex]);
    }
}
